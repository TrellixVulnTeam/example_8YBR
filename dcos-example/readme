# install java
apt-get install openjdk-8-jdk

# install docker (reference : https://docs.docker.com/install/linux/docker-ce/ubuntu/)
apt-get purge docker-ce
rm -rf /var/lib/docker
apt-get remove docker docker-engine docker.io
apt-get update
apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
apt-get install docker-ce
docker run hello-world

# install and run dcos (reference : https://dcos-e2e-cli.readthedocs.io/en/latest/)
curl --fail -L https://github.com/dcos/dcos-e2e/releases/download/2018.12.05.0/minidcos -o /usr/local/bin/minidcos && chmod +x /usr/local/bin/minidcos
minidcos docker doctor
mkdir -p /opt/dcos
cd /opt/dcos
minidcos docker download-installer
minidcos docker create ./dcos_generate_config.sh --docker-version 17.12.1-ce --masters 3 --agents 5
minidcos docker wait
minidcos docker web

# install dcos client
cd /opt/dcos
curl -O https://downloads.dcos.io/binaries/cli/linux/x86-64/dcos-1.8/dcos
chmod +x dcos
./dcos config set core.dcos_url http://172.17.0.3
./dcos auth login


./dcos task exec -it my-tensorflow-no-gpus /bin/sh
minidcos docker task exec -it my-tensorflow-no-gpus /bin/sh
--------------------------------------------------------------------------

# install git
yum install git

# install virtualbox
cd /etc/yum.repos.d/
wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
yum update -y
yum -y install epel-release
yum -y install gcc make patch  dkms qt libgomp
yum -y install kernel-headers kernel-devel fontforge binutils glibc-headers glibc-devel
yum -y install VirtualBox-5.2

# install vagrant
cd /tmp
wget https://releases.hashicorp.com/vagrant/2.1.2/vagrant_2.1.2_x86_64.rpm
yum -y localinstall vagrant_2.1.2_x86_64.rpm

# install vagrant-hostmanager plugin
vagrant plugin install vagrant-hostmanager

# clone, configure, and deploy
cd /tmp
git clone https://github.com/dcos/dcos-vagrant
cd dcos-vagrant
cp VagrantConfig-1m-1a-1p.yaml VagrantConfig.yaml
vagrant up

# access the GUI 
http://m1.dcos/

# install the DC/OS CLI
/tmp/dcos-vagrant/ci/dcos-install-cli.sh



# list vm
VBoxManage list runningvms

# Stop running VMs by "hibernating" them (reommended to avoid data loss)
VBoxManage controlvm m1.dcos savestate
VBoxManage controlvm a1.dcos savestate
VBoxManage controlvm p1.dcos savestate
VBoxManage controlvm boot.dcos savestate

# Poweroff running VMs (not recommended because we may lose data in the guest)
VBoxManage controlvm m1.dcos poweroff
VBoxManage controlvm a1.dcos poweroff
VBoxManage controlvm p1.dcos poweroff
VBoxManage controlvm boot.dcos poweroff

# Use ACPI in an ACPI-aware guest OS (preferable to poweroff for graceful shutdown of guests)
VBoxManage controlvm m1.dcos acpipowerbutton
VBoxManage controlvm a1.dcos acpipowerbutton
VBoxManage controlvm p1.dcos acpipowerbutton
VBoxManage controlvm boot.dcos acpipowerbutton

# list box
vagrant box list

# remove box
vagrant box remove mesosphere/dcos-centos-virtualbox


---------------------------------------------------------------------------------------------------------------------------------------

## install software (reference : https://docs.mesosphere.com/1.11/installing/production/system-requirements/docker-centos/)
# install git
yum install git

# install Linuxbrew
sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
test -d ~/.linuxbrew && PATH="$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH"
test -d /home/linuxbrew/.linuxbrew && PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH"
test -r ~/.bash_profile && echo "export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'":'"$PATH"' >>~/.bash_profile
echo "export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'":'"$PATH"' >>~/.profile

# install dcose2e
brew install https://raw.githubusercontent.com/dcos/dcos-e2e/master/dcose2e.rb

# enable user to run docker command 
groupadd docker
usermod -a -G docker hsiehpinghan
<<login again>>

# update docker (reference : https://docs.docker.com/install/linux/docker-ce/centos/)
yum remove docker \
  docker-client \
  docker-client-latest \
  docker-common \
  docker-latest \
  docker-latest-logrotate \
  docker-logrotate \
  docker-selinux \
  docker-engine-selinux \
  docker-engine
yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2
yum-config-manager \
  --add-repo \
  https://download.docker.com/linux/centos/docker-ce.repo
yum install docker-ce

# enable OverlayFS
yum upgrade --assumeyes --tolerant
yum update --assumeyes
sudo tee /etc/modules-load.d/overlay.conf <<-'EOF'
overlay
EOF

# configure yum to use the Docker yum repo
sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'
[docker-ce-stable]
name=Docker CE Stable - $basearch
baseurl=https://download.docker.com/linux/centos/7/$basearch/stable
enabled=1
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg
EOF

# configure systemd to run the Docker Daemon with OverlayFS
sudo mkdir -p /etc/systemd/system/docker.service.d && sudo tee /etc/systemd/system/docker.service.d/override.conf <<- EOF
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd --storage-driver=overlay
EOF

# start docker
service docker restart
docker info






# check your system
dcos-docker doctor

# download artifactÂ¶
dcos-docker download-artifact  

# create a dcos cluster.
dcos-docker create /tmp/dcos_generate_config.sh --masters 3 --agents 5

# wait for dcos to start.
dcos-docker wait

# open web ui
dcos-docker web

# run an arbitrary command on a node
dcos-docker run pytest -k test_tls.py

# destroy a cluster
dcos-docker destroy

# check mesos ui
<dcos-url>/mesos/

# check service log
dcos service log --follow <scheduler-service-name>

# install kafka
dcos package install kafka --package-version=1.1.19.1-0.10.1.0

# install kafka client
cd /tmp
vi kafka-client.json
	{
	 "id": "/kafka-client",
	 "instances": 1,
	 "container": {
	 "type": "MESOS",
	 "docker": {
	 "image": "mesosphere/kafka-client:latest"
	 }
	 },
	 "cpus": 0.5,
	 "mem": 256,
	 "cmd": "sleep 100000"
	}
dcos marathon app add kafka-client.json

# show kafka broker socket
dcos kafka connection address/dns

dcos service log --follow jenkins

http://172.17.0.2:5050/state

http://172.17.0.2:5050/mesos/master/slaves

