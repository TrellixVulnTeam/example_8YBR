reference : https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html
jclasslib : https://github.com/ingokegel/jclasslib

----------------------------- heap -----------------------------
# Specifies the maximum size (in bytes) of the memory allocation pool in bytes. 
# This value must be a multiple of 1024 and greater than 2 MB. 
# The default value is chosen at runtime based on system configuration. 
# For server deployments, 
# -Xms and -Xmx are often set to the same value.
-Xmx<size>[g|G|m|M|k|K]
-Xmx2M

# Sets the initial size (in bytes) of the heap. 
# This value must be a multiple of 1024 and greater than 1 MB.
-Xms<size>[g|G|m|M|k|K]
-Xms1M

# Sets the minimum allowed percentage of free heap space (0 to 100) after a GC event. 
# If free heap space falls below this value, 
# then the heap will be expanded. 
# By default, 
# this value is set to 40%.
-XX:MinHeapFreeRatio=percent
-XX:MinHeapFreeRatio=40

# Sets the maximum allowed percentage of free heap space (0 to 100) after a GC event.
# If free heap space expands above this value,
# then the heap will be shrunk.
# By default,
# this value is set to 70%.
-XX:MaxHeapFreeRatio=percent
-XX:MaxHeapFreeRatio=70

# Sets the initial and maximum size (in bytes) of the heap for the young generation (nursery)
# The young generation region of the heap is used for new objects. 
# GC is performed in this region more often than in other regions.
# If the size for the young generation is too small, 
# then a lot of minor garbage collections will be performed. 
# If the size is too large, 
# then only full garbage collections will be performed, 
# which can take a long time to complete. 
# Oracle recommends that you keep the size for the young generation between a half and a quarter of the overall heap size.
-Xmn<size>[g|G|m|M|k|K]
-Xmn2M	// suggest 1/2 ~ 1/4 heap size

# Sets the space (in bytes) allocated to the permanent generation that triggers a garbage collection if it is exceeded. 
# This option was deprecated un JDK 8, and superseded by the -XX:MetaspaceSize option.
-XX:PermSize=<size>[g|G|m|M|k|K]
-XX:PermSize=4M

# Sets the maximum permanent generation space size (in bytes). 
# This option was deprecated in JDK 8, and superseded by the -XX:MaxMetaspaceSize option.
-XX:MaxPermSize=<size>[g|G|m|M|k|K]
-XX:MaxPermSize=64M	// suggest 64MB/128MB

# Sets the initial size (in bytes) of the heap for the young generation (nursery).
# The -XX:NewSize option is equivalent to -Xmn.
-XX:NewSize=<size>[g|G|m|M|k|K]
-XX:NewSize=256m

# Sets the ratio between eden space size and survivor space size. 
# By default, this option is set to 8.
-XX:SurvivorRatio=<size>	// <size>=eden/s0=eden/s1
-XX:SurvivorRatio=8

# Sets the desired percentage of survivor space (0 to 100) used after young garbage collection. 
# By default, 
# this option is set to 50%.
-XX:TargetSurvivorRatio=percent
-XX:TargetSurvivorRatio=50

# Sets the ratio between young and old generation sizes.
# By default, this option is set to 2.
-XX:NewRatio=ratio
-XX:NewRatio=2

# Sets the maximum tenuring threshold for use in adaptive GC sizing. 
# The largest value is 15. 
# The default value is 15 for the parallel (throughput) collector, 
# and 6 for the CMS collector.
-XX:MaxTenuringThreshold=<size>
-XX:MaxTenuringThreshold=15

# Enables the dumping of the Java heap to a file in the current directory by using the heap profiler (HPROF) when a java.lang.OutOfMemoryError exception is thrown. 
# You can explicitly set the heap dump file path and name using the -XX:HeapDumpPath option.
# By default, this option is disabled and the heap is not dumped when an OutOfMemoryError exception is thrown.
-XX:+HeapDumpOnOutOfMemory

-XX:HeapDumpPath=path
# Sets the path and file name for writing the heap dump provided by the heap profiler (HPROF) when the -XX:+HeapDumpOnOutOfMemoryError option is set.
# By default,
# the file is created in the current working directory,
# and it is named java_pidpid.hprof where pid is the identifier of the process that caused the error.
# The following example shows how to set the default file explicitly (%p represents the current process identificator):
-XX:HeapDumpPath=./java_pid%p.hprof
-XX:HeapDumpPath=C:/log/java/java_heapdump.log

# Sets a custom command or a series of semicolon-separated commands to run when an OutOfMemoryError exception is first thrown.
# If the string contains spaces,
# then it must be enclosed in quotation marks.
# For an example of a command string,
# see the description of the -XX:OnError option.
-XX:OnOutOfMemoryError=string
-XX:OnOutOfMemoryError=C:\reset.bat

----------------------------- stack -----------------------------
# Sets the thread stack size (in bytes).
# The default value depends on virtual memory.
-Xss<size>[g|G|m|M|k|K]
-Xss1M

----------------------------- gc -----------------------------
# Enables the use of the serial garbage collector.
# This is generally the best choice for small and simple applications that do not require any special functionality from garbage collection.
# By default,
# this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM.
-XX:+UseSerialGC

# Enables the use of parallel threads for collection in the young generation.
# By default,
# this option is disabled.
# It is automatically enabled when you set the -XX:+UseConcMarkSweepGC option.
# Using the -XX:+UseParNewGC option without the -XX:+UseConcMarkSweepGC option was deprecated in JDK 8.
-XX:+UseParNewGC

# Enables the use of the CMS garbage collector for the old generation.
# Oracle recommends that you use the CMS garbage collector when application latency requirements cannot be met by the throughput (-XX:+UseParallelGC) garbage collector.
# The G1 garbage collector (-XX:+UseG1GC) is another alternative.
# By default,
# this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM.
# When this option is enabled,
# the -XX:+UseParNewGC option is automatically set and you should not disable it,
# because the following combination of options has been deprecated in JDK 8: -XX:+UseConcMarkSweepGC -XX:-UseParNewGC.
-XX:+UseConcMarkSweepGC

# Sets the number of threads used for parallel garbage collection in the young and old generations.
# The default value depends on the number of CPUs available to the JVM.
-XX:ParallelGCThreads=<threads>
-XX:ParallelGCThreads=2		// suggest threads = cpu amount

# Enables the use of the parallel garbage collector for full GCs.
# By default,
# this option is disabled.
# Enabling it automatically enables the -XX:+UseParallelGC option.
-XX:+UseParallelOldGC

# Sets a target for the maximum GC pause time (in milliseconds).
# This is a soft goal,
# and the JVM will make its best effort to achieve it.
# By default,
# there is no maximum pause time value.
-XX:MaxGCPauseMillis=<time>
-XX:MaxGCPauseMillis=500

# Enables the use of adaptive generation sizing.
# This option is enabled by default.
# To disable adaptive generation sizing,
# specify -XX:-UseAdaptiveSizePolicy and set the size of the memory allocation pool explicitly (see the -XX:SurvivorRatio option).
-XX:+UseAdaptiveSizePolicy

# Enables the use of the parallel scavenge garbage collector (also known as the throughput collector) to improve the performance of your application by leveraging multiple processors.
# By default,
# this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM.
# If it is enabled, 
# then the -XX:+UseParallelOldGC option is automatically enabled,
# unless you explicitly disable it.
-XX:+UseParallelGC

# Sets the percentage of the old generation occupancy (0 to 100) at which to start a CMS collection cycle.
# The default value is set to -1.
# Any negative value (including the default) implies that -XX:CMSTriggerRatio is used to define the value of the initiating occupancy fraction.
-XX:CMSInitiatingOccupancyFraction=<percent>
-XX:CMSInitiatingOccupancyFraction=68

# Enables class unloading when using the concurrent mark-sweep (CMS) garbage collector.
# This option is enabled by default.
# To disable class unloading for the CMS garbage collector,
# specify -XX:-CMSClassUnloadingEnabled.
-XX:+CMSClassUnloadingEnabled

# Sets the percentage of the permanent generation occupancy (0 to 100) at which to start a GC.
# This option was deprecated in JDK 8 with no replacement.
-XX:CMSInitiatingPermOccupancyFraction=percent

# Enables the use of the occupancy value as the only criterion for initiating the CMS collector.
# By default,
# this option is disabled and other criteria may be used.
-XX:+UseCMSInitiatingOccupancyOnly

# Enables the incremental mode for the CMS collector.
# This option was deprecated in JDK 8 with no replacement,
# along with other options that start with CMSIncremental.
-XX:+CMSIncrementalMode

# Enables the use of the garbage-first (G1) garbage collector.
# It is a server-style garbage collector,
# targeted for multiprocessor machines with a large amount of RAM.
# It meets GC pause time goals with high probability,
# while maintaining good throughput.
# The G1 collector is recommended for applications requiring large heaps (sizes of around 6 GB or larger) with limited GC latency requirements (stable and predictable pause time below 0.5 seconds).
# By default,
#  this option is disabled and the collector is chosen automatically based on the configuration of the machine and type of the JVM.
-XX:+UseG1GC

# Enables the option that disables processing of calls to System.gc().
# This option is disabled by default,
# meaning that calls to System.gc() are processed.
# If processing of calls to System.gc() is disabled,
# the JVM still performs GC when necessary.
-XX:+DisableExplicitGC

# On Solaris,
# sets the maximum size (in bytes) for large pages used for Java heap.
# The size argument must be a power of 2 (2, 4, 8, 16, ...).
# By default,
# the size is set to 0,
# meaning that the JVM chooses the size for large pages automatically.
-XX:LargePageSizeInBytes=<size>[g|G|m|M|k|K]
-XX:LargePageSizeInBytes=4m

# Enables the use of large page memory.
# By default,
# this option is disabled and large page memory is not used.
# For more information, see "Large Pages".
-XX:+UseLargePages

# Disables the use of compressed pointers.
# By default,
# this option is enabled,
# and compressed pointers are used when Java heap sizes are less than 32 GB.
# When this option is enabled,
# object references are represented as 32-bit offsets instead of 64-bit pointers,
# which typically increases performance when running the application with Java heap sizes less than 32 GB.
# This option works only for 64-bit JVMs.
# It is also possible to use compressed pointers when Java heap sizes are greater than 32GB.
# See the -XX:ObjectAlignmentInBytes option.
-XX:-UseCompressedOops

# Displays information about each garbage collection (GC) event.
-verbose:gc

# Enables printing of detailed messages at every GC. 
# By default, this option is disabled.
-XX:+PrintGCDetails

# Enables printing of messages at every GC.
# By default,
# this option is disabled.
-XX:+PrintGC

# Enables printing of time stamps at every GC.
# By default,
# this option is disabled.
-XX:+PrintGCTimeStamps

# Enables printing of tenuring age information.
# By default,
# this option is disabled.
-XX:+PrintTenuringDistribution

# Enables printing of how much time elapsed since the last pause (for example, a GC pause).
# By default,
# this option is disabled.
-XX:+PrintGCApplicationConcurrentTime

# Enables printing of how much time the pause (for example, a GC pause) lasted.
# By default,
# this option is disabled.
-XX:+PrintGCApplicationStoppedTime

# Sets the file to which verbose GC events information should be redirected for logging.
# The information written to this file is similar to the output of -verbose:gc with the time elapsed since the first GC event preceding each logged event.
# The -Xloggc option overrides -verbose:gc if both are given with the same java command.
-Xloggc:filename
-Xloggc:garbage-collection.log

# Enables tracing of classes as they are loaded.
# By default,
# this option is disabled and classes are not traced.
-XX:+TraceClassLoading

# Enables tracing of classes as they are unloaded.
# By default,
# this option is disabled and classes are not traced.
-XX:+TraceClassUnloading

# Enables printing of a class instance histogram after a Control+Break event.
# By default,
# this option is disabled.
# Setting this option is equivalent to running the jmap -histo command,
# or the jcmd pid GC.class_histogram command,
# where pid is the current Java process identifier.
-XX:+PrintClassHistogram

# Disables garbage collection (GC) of classes.
# This can save some GC time,
# which shortens interruptions during the application run.
# When you specify -Xnoclassgc at startup,
# the class objects in the application will be left untouched during GC and will always be considered live.
# This can result in more memory being permanently occupied which,
# if not used carefully,
# will throw an out of memory exception.
-Xnoclassgc

# Enables incremental garbage collection.
# This option was deprecated in JDK 8 with no replacement.
-Xincgc

----------------------------- JIT -----------------------------

-XX:CompileThreshold=invocations
# Sets the number of interpreted method invocations before compilation.
# By default, in the server JVM, the JIT compiler performs 10,000 interpreted method invocations to gather information for efficient compilation.
# For the client JVM, the default setting is 1,500 invocations.
# This option is ignored when tiered compilation is enabled;
# see the option -XX:+TieredCompilation.
# You can completely disable interpretation of Java methods before compilation by specifying the -Xcomp option.
-XX:CompileThreshold=<number>
-XX:CompileThreshold=5000

# Enables verbose diagnostic output from the JVM by printing a message to the console every time a method is compiled.
# This enables you to see which methods actually get compiled.
# By default,
# this option is disabled and diagnostic output is not printed.
# You can also log compilation activity to a file by using the -XX:+LogCompilation option.
-XX:+PrintCompilation

-Xverify:mode
# Sets the mode of the bytecode verifier.
# Bytecode verification ensures that class files are properly formed and satisfy the constraints listed in The Java Virtual Machine Specification;
# see section 4.10, "Verification of class Files": https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.10
# Do not turn off verification when running dynamically generated or untrusted class files as this reduces the protection provided by Java and makes diagnosing problems with ill-formed bytecodes more difficult.
# Possible mode arguments for this option include the following:
#   remote : Verifies all bytecodes not loaded by the bootstrap class loader. This is the default behavior.
#   all : Enables verification of all bytecodes.
#   none : Disables verification of all bytecodes.


